// api/telegram-inventory.js
// Endpoint sp√©cial pour la Mini App Telegram

import { createClient } from '@supabase/supabase-js';

export default async function handler(req, res) {
  try {
    // V√©rifier la m√©thode HTTP
    if (req.method !== 'GET') {
      return res.status(405).json({ error: 'Method not allowed' });
    }

    console.log('üì± API Telegram Inventory - D√©marrage');

    // Cr√©er le client Supabase
    const supabase = createClient(
      'https://gquyvmelpkgnddvefpwd.supabase.co',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdxdXl2bWVscGtnbmRkdmVmcHdkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyMTU1MDAsImV4cCI6MjA3MTc5MTUwMH0.rzMv2n_RyFDlMCxzqLt6B-UHS-OlcoJDXEOWs1-tTN0'
    );

    // R√©cup√©rer l'inventaire de l'utilisateur par d√©faut (drole)
    const userId = '986778065'; // ID par d√©faut pour votre Mini App
    
    console.log(`üì± API Telegram Inventory - R√©cup√©ration pour l'utilisateur: ${userId}`);

    // R√©cup√©rer l'utilisateur
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', userId)
      .single();

    if (userError || !user) {
      console.log(`‚ö†Ô∏è Utilisateur non trouv√©: ${userId}`);
      return res.status(404).json({ 
        success: false, 
        error: 'Utilisateur non trouv√©',
        userId: userId
      });
    }

    // R√©cup√©rer l'inventaire avec JOIN sur les gifts
    const { data: inventory, error: inventoryError } = await supabase
      .from('inventory')
      .select(`
        *,
        gifts (
          collectible_id,
          gift_name,
          gift_value,
          collectible_model,
          collectible_backdrop,
          collectible_symbol
        )
      `)
      .eq('user_id', user.id)
      .eq('status', 'active');

    if (inventoryError) {
      console.error('‚ùå Erreur r√©cup√©ration inventaire:', inventoryError);
      return res.status(500).json({ 
        success: false, 
        error: 'Erreur r√©cup√©ration inventaire',
        details: inventoryError.message
      });
    }

    // Transformer les donn√©es pour la Mini App
    const transformedInventory = inventory.map(item => ({
      id: item.id,
      gift_id: item.gifts?.collectible_id || item.gift_id,
      gift_name: item.gifts?.gift_name || 'Gift inconnu',
      gift_value: item.gifts?.gift_value || 25,
      collectible_model: item.gifts?.collectible_model || 'Mod√®le inconnu',
      collectible_backdrop: item.gifts?.collectible_backdrop || 'Arri√®re-plan inconnu',
      collectible_symbol: item.gifts?.collectible_symbol || 'Symbole inconnu',
      status: item.status,
      received_at: item.received_at,
      withdrawn_at: item.withdrawn_at
    }));

    console.log(`‚úÖ API Telegram Inventory - ${transformedInventory.length} gifts r√©cup√©r√©s`);

    // Retourner l'inventaire au format JSON pour la Mini App
    res.status(200).json({
      success: true,
      userId: userId,
      user: {
        id: user.id,
        telegram_id: user.telegram_id,
        username: user.username
      },
      inventory: transformedInventory,
      count: transformedInventory.length,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå API Telegram Inventory - Erreur:', error);
    
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
}

