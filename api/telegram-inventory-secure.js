// api/telegram-inventory-secure.js
// API S√âCURIS√âE pour la Mini App Telegram avec authentification

import { createClient } from '@supabase/supabase-js';
import crypto from 'crypto';

// Configuration Supabase
const supabaseUrl = 'https://gquyvmelpkgnddvefpwd.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdxdXl2bWVscGtnbmRkdmVmcHdkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyMTU1MDAsImV4cCI6MjA3MTc5MTUwMH0.rzMv2n_RyFDlMCxzqLt6B-UHS-OlcoJDXEOWs1-tTN0';

// Token de votre bot Telegram (√† mettre dans les variables d'environnement)
const BOT_TOKEN = '7516841125:AAH_jkU6wLOEoApkwu8afeXbZr58bBqiIrU';

// Fonction de v√©rification de l'authentification Telegram
function verifyTelegramAuth(initData) {
  try {
    if (!initData) {
      console.log('‚ùå InitData manquant');
      return { isValid: false, error: 'InitData manquant' };
    }

    // Parser l'InitData
    const params = new URLSearchParams(initData);
    const hash = params.get('hash');
    
    if (!hash) {
      console.log('‚ùå Hash manquant dans InitData');
      return { isValid: false, error: 'Hash manquant' };
    }

    // Supprimer le hash pour la v√©rification
    params.delete('hash');
    
    // Trier les param√®tres par ordre alphab√©tique
    const sortedParams = Array.from(params.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([key, value]) => `${key}=${value}`)
      .join('\n');

    // Cr√©er le secret pour la v√©rification
    const secret = crypto.createHmac('sha256', 'WebAppData').update(BOT_TOKEN).digest();
    
    // Calculer le hash attendu
    const expectedHash = crypto.createHmac('sha256', secret).update(sortedParams).digest('hex');
    
    // Comparer les hashes
    if (hash === expectedHash) {
      console.log('‚úÖ Authentification Telegram v√©rifi√©e');
      return { isValid: true, userData: Object.fromEntries(params) };
    } else {
      console.log('‚ùå Hash invalide - authentification √©chou√©e');
      return { isValid: false, error: 'Authentification √©chou√©e' };
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    return { isValid: false, error: 'Erreur de v√©rification' };
  }
}

// Fonction pour extraire l'ID utilisateur Telegram
function extractTelegramUserId(userData) {
  try {
    // L'ID utilisateur est dans user.id
    if (userData.user) {
      const user = JSON.parse(userData.user);
      // Convertir en string pour la coh√©rence avec la base de donn√©es
      return user.id.toString();
    }
    return null;
  } catch (error) {
    console.error('‚ùå Erreur extraction ID utilisateur:', error);
    return null;
  }
}

export default async function handler(req, res) {
  try {
    // V√©rifier la m√©thode HTTP
    if (req.method !== 'GET') {
      return res.status(405).json({ 
        success: false,
        error: 'Method not allowed' 
      });
    }

    console.log('üîê API Telegram Inventory S√©curis√©e - D√©marrage');

    // R√©cup√©rer l'InitData depuis les headers
    const initData = req.headers['x-telegram-init-data'];
    
    if (!initData) {
      console.log('‚ùå Header X-Telegram-Init-Data manquant');
      return res.status(401).json({
        success: false,
        error: 'Authentification requise',
        message: 'Header X-Telegram-Init-Data manquant'
      });
    }

    // V√©rifier l'authentification Telegram
    const authResult = verifyTelegramAuth(initData);
    
    if (!authResult.isValid) {
      console.log('‚ùå Authentification √©chou√©e:', authResult.error);
      return res.status(401).json({
        success: false,
        error: 'Authentification √©chou√©e',
        message: authResult.error
      });
    }

    // Extraire l'ID utilisateur Telegram
    const telegramUserId = extractTelegramUserId(authResult.userData);
    
    if (!telegramUserId) {
      console.log('‚ùå Impossible d\'extraire l\'ID utilisateur');
      return res.status(400).json({
        success: false,
        error: 'ID utilisateur invalide',
        message: 'Impossible d\'extraire l\'ID utilisateur Telegram'
      });
    }

    console.log(`üîê Utilisateur authentifi√©: ${telegramUserId}`);

    // Cr√©er le client Supabase
    const supabase = createClient(supabaseUrl, supabaseAnonKey);

    // R√©cup√©rer l'utilisateur par son Telegram ID
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegramUserId)
      .single();

    if (userError || !user) {
      console.log(`‚ö†Ô∏è Utilisateur non trouv√©: ${telegramUserId}`);
      return res.status(404).json({ 
        success: false, 
        error: 'Utilisateur non trouv√©',
        message: 'Votre compte n\'est pas encore enregistr√© dans notre syst√®me',
        telegramUserId: telegramUserId
      });
    }

    console.log(`‚úÖ Utilisateur trouv√©: @${user.username} (${user.telegram_id})`);

    // R√©cup√©rer l'inventaire PRIV√â de l'utilisateur authentifi√©
    // Utilise directement la table gifts comme inventaire (apr√®s nettoyage)
    const { data: gifts, error: inventoryError } = await supabase
      .from('gifts')
      .select('*')
      .eq('telegram_id', telegramUserId); // S√âCURIT√â : uniquement l'inventaire de l'utilisateur connect√©

    if (inventoryError) {
      console.error('‚ùå Erreur r√©cup√©ration inventaire:', inventoryError);
      return res.status(500).json({ 
        success: false, 
        error: 'Erreur r√©cup√©ration inventaire',
        details: inventoryError.message
      });
    }

    // Transformer les donn√©es pour la Mini App
    const transformedInventory = gifts.map((gift, index) => ({
      id: `${gift.telegram_id}_${gift.collectible_id}`, // ID unique bas√© sur la cl√© composite
      collectible_id: gift.collectible_id,
      username: gift.username,
      // Formatage selon vos pr√©f√©rences (GiftName #1, #2, etc.)
      display_name: `${gift.collectible_id} #${index + 1}`,
      received_at: new Date().toISOString() // Timestamp actuel
    }));

    console.log(`‚úÖ Inventaire s√©curis√© r√©cup√©r√©: ${transformedInventory.length} gifts pour ${user.username}`);

    // Retourner l'inventaire PRIV√â au format JSON pour la Mini App
    res.status(200).json({
      success: true,
      user: {
        telegram_id: user.telegram_id,
        username: user.username
      },
      inventory: transformedInventory,
      count: transformedInventory.length,
      timestamp: new Date().toISOString(),
      security: {
        authenticated: true,
        method: 'telegram_init_data',
        user_verified: true
      }
    });

  } catch (error) {
    console.error('‚ùå API Telegram Inventory S√©curis√©e - Erreur:', error);
    
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
}
