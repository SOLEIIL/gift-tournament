const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
require('dotenv').config();

async function analyzePersonalGifts() {
  console.log('üîç ANALYSE DES GIFTS DANS LES CONVERSATIONS PERSONNELLES');
  console.log('========================================================');
  
  const client = new TelegramClient(
    new StringSession(process.env.TELEGRAM_SESSION_STRING),
    parseInt(process.env.TELEGRAM_API_ID),
    process.env.TELEGRAM_API_HASH,
    { connectionRetries: 5 }
  );

  try {
    await client.start();
    console.log('‚úÖ Connect√© √† Telegram');
    
    // R√©cup√©rer tous les dialogues
    const dialogs = await client.getDialogs();
    console.log(`üì± ${dialogs.length} dialogues trouv√©s`);
    
    let personalChats = 0;
    let giftsFound = 0;
    let realTelegramGifts = 0;
    
    // Analyser chaque dialogue
    for (const dialog of dialogs) {
      // Filtrer uniquement les conversations personnelles (pas les groupes/channels)
      if (dialog.entity && 
          (dialog.entity.className === 'User' || 
           dialog.entity.className === 'Chat' && dialog.entity.broadcast === false)) {
        
        personalChats++;
        console.log(`\nüë§ CONVERSATION PERSONNELLE: ${dialog.title || 'Sans nom'}`);
        console.log('‚îÄ'.repeat(60));
        console.log(`üì± Type: ${dialog.entity.className}`);
        
        try {
          // R√©cup√©rer les 100 derniers messages
          const messages = await client.getMessages(dialog.entity, { limit: 100 });
          console.log(`üì® ${messages.length} messages trouv√©s`);
          
          let chatGifts = 0;
          
          for (const message of messages) {
            // üîç PRIORIT√â 1: V√©rifier les MessageService avec MessageActionStarGiftUnique
            if (message.className === 'MessageService' && 
                message.action && 
                message.action.className === 'MessageActionStarGiftUnique') {
              
              realTelegramGifts++;
              chatGifts++;
              giftsFound++;
              
              console.log(`\nüéÅ üéØ VRAI GIFT TELEGRAM D√âTECT√â ! (ID: ${message.id})`);
              console.log(`   üìã Action: ${message.action.className}`);
              
              if (message.action.gift) {
                const gift = message.action.gift;
                console.log(`   üè∑Ô∏è Titre: ${gift.title}`);
                console.log(`   üÜî Slug: ${gift.slug}`);
                console.log(`   üî¢ Num√©ro: ${gift.num}`);
                console.log(`   üí∞ Co√ªt: ${message.action.transferStars} stars`);
                
                if (gift.attributes && gift.attributes.length > 0) {
                  console.log(`   ‚≠ê Attributs:`);
                  gift.attributes.forEach(attr => {
                    console.log(`      - ${attr.name}: ${attr.rarityPermille}‚Ä∞ (${attr.className})`);
                  });
                }
              }
              
              // Essayer d'extraire l'exp√©diteur
              if (message.action.fromId && message.action.fromId.className === 'PeerUser') {
                console.log(`   üë§ Exp√©diteur ID: ${message.action.fromId.userId}`);
              }
              
            }
            // üîç PRIORIT√â 2: V√©rifier les messages avec m√©dias (potentiels gifts)
            else if (message.className === 'Message' && message.media) {
              if (message.media.className === 'MessageMediaDocument') {
                const doc = message.media.document;
                // V√©rifier si c'est un document qui pourrait √™tre un gift
                if (doc.attributes && doc.attributes.some(attr => 
                  attr.className === 'DocumentAttributeVideo' || 
                  attr.className === 'DocumentAttributeSticker' ||
                  attr.className === 'DocumentAttributeAnimated'
                )) {
                  chatGifts++;
                  giftsFound++;
                  console.log(`\nüì¶ M√âDIA POTENTIEL (ID: ${message.id}):`);
                  console.log(`   üìÑ Document: ${doc.fileName || 'Sans nom'}`);
                  console.log(`   üíæ Taille: ${doc.size} bytes`);
                  console.log(`   üé¨ MIME: ${doc.mimeType}`);
                  
                  if (doc.attributes) {
                    console.log(`   üîç Attributs:`);
                    doc.attributes.forEach(attr => {
                      console.log(`      - ${attr.className}: ${attr.name || 'N/A'}`);
                    });
                  }
                }
              }
            }
          }
          
          if (chatGifts > 0) {
            console.log(`\n‚úÖ ${chatGifts} gift(s) trouv√©(s) dans cette conversation`);
          } else {
            console.log(`\n‚ùå Aucun gift trouv√© dans cette conversation`);
          }
          
        } catch (chatError) {
          console.warn(`‚ö†Ô∏è Erreur lors de l'analyse de ${dialog.title}:`, chatError.message);
          continue;
        }
      }
    }
    
    // R√©sum√© final
    console.log('\nüìä R√âSUM√â DE L\'ANALYSE DES CONVERSATIONS PERSONNELLES:');
    console.log('=============================================================');
    console.log(`üë§ Conversations personnelles analys√©es: ${personalChats}`);
    console.log(`üéÅ Total des gifts d√©tect√©s: ${giftsFound}`);
    console.log(`üéØ Vrais gifts Telegram (MessageActionStarGiftUnique): ${realTelegramGifts}`);
    console.log(`üì¶ M√©dias potentiels: ${giftsFound - realTelegramGifts}`);
    
    if (realTelegramGifts > 0) {
      console.log('\nüéâ SUCC√àS: Des vrais gifts Telegram ont √©t√© d√©tect√©s !');
      console.log('‚úÖ Le syst√®me fonctionne correctement pour les gifts natifs');
    } else if (giftsFound > 0) {
      console.log('\n‚ö†Ô∏è ATTENTION: Seuls des m√©dias potentiels ont √©t√© d√©tect√©s');
      console.log('‚ùå Aucun vrai gift Telegram (MessageActionStarGiftUnique) trouv√©');
    } else {
      console.log('\n‚ùå AUCUN GIFT: Aucun gift ou m√©dia d√©tect√© dans les conversations personnelles');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error.message);
  } finally {
    await client.disconnect();
    console.log('\nüîå D√©connect√© de Telegram');
  }
}

// Lancer l'analyse
analyzePersonalGifts();

