// test-withdraw-sync-v2.mjs
// Script de test pour v√©rifier la synchronisation des retraits en temps r√©el - Version 2

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://gquyvmelpkgnddvefpwd.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdxdXl2bWVscGtnbmRkdmVmcHdkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyMTU1MDAsImV4cCI6MjA3MTc5MTUwMH0.rzM2n_RyFDlMCxzqLt6B-UHS-OlcoJDXEOWs1-tTN0';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testWithdrawSyncV2() {
  try {
    console.log('üß™ TEST DE SYNCHRONISATION DES RETRAITS - VERSION 2');
    console.log('==================================================');
    
    // 1. V√©rifier l'inventaire actuel de l'utilisateur de test
    console.log('\n1Ô∏è‚É£ V√©rification de l\'inventaire actuel...');
    
    // Utiliser un telegram_id r√©el de votre base
    const testTelegramId = '986778065'; // Remplacez par un ID r√©el
    
    const { data: currentInventory, error: inventoryError } = await supabase
      .from('inventory')
      .select('*')
      .eq('telegram_id', testTelegramId);
    
    if (inventoryError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'inventaire:', inventoryError);
      return;
    }
    
    console.log(`üì¶ Inventaire actuel: ${currentInventory.length} gifts`);
    
    if (currentInventory.length === 0) {
      console.log('‚ùå Aucun gift trouv√© pour le test');
      return;
    }
    
    // 2. S√©lectionner un gift √† retirer
    const giftToWithdraw = currentInventory[0];
    console.log(`üéÅ Gift s√©lectionn√© pour le retrait:`);
    console.log(`   Collectible ID: ${giftToWithdraw.collectible_id}`);
    console.log(`   Username: ${giftToWithdraw.username}`);
    
    // 3. Simuler le retrait du gift
    console.log('\n2Ô∏è‚É£ Simulation du retrait du gift...');
    
    const { error: deleteError } = await supabase
      .from('inventory')
      .delete()
      .eq('telegram_id', testTelegramId)
      .eq('collectible_id', giftToWithdraw.collectible_id);
    
    if (deleteError) {
      console.error('‚ùå Erreur lors du retrait:', deleteError);
      return;
    }
    
    console.log('‚úÖ Gift retir√© avec succ√®s !');
    
    // 4. V√©rifier l'inventaire apr√®s le retrait
    console.log('\n3Ô∏è‚É£ V√©rification de l\'inventaire apr√®s retrait...');
    
    const { data: updatedInventory, error: updatedError } = await supabase
      .from('inventory')
      .select('*')
      .eq('telegram_id', testTelegramId);
    
    if (updatedError) {
      console.error('‚ùå Erreur lors de la v√©rification:', updatedError);
      return;
    }
    
    console.log(`üì¶ Inventaire apr√®s retrait: ${updatedInventory.length} gifts`);
    
    // 5. V√©rifier que le gift a bien √©t√© supprim√©
    const giftStillExists = updatedInventory.some(
      item => item.collectible_id === giftToWithdraw.collectible_id
    );
    
    if (!giftStillExists) {
      console.log('‚úÖ Gift correctement supprim√© de l\'inventaire');
    } else {
      console.log('‚ùå Gift toujours pr√©sent dans l\'inventaire');
    }
    
    // 6. Test de l'API s√©curis√©e
    console.log('\n4Ô∏è‚É£ Test de l\'API s√©curis√©e...');
    
    try {
      // Simuler une requ√™te √† l'API (sans authentification Telegram)
      const response = await fetch(`https://giftscasinobackup2025-08-2702-08.vercel.app/api/telegram-inventory-secure`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      if (response.status === 401) {
        console.log('‚úÖ API s√©curis√©e fonctionne: authentification requise');
      } else if (response.status === 400) {
        console.log('‚úÖ API s√©curis√©e fonctionne: donn√©es Telegram manquantes');
      } else {
        console.log(`‚ö†Ô∏è R√©ponse API inattendue: ${response.status}`);
      }
      
    } catch (error) {
      console.log('‚ùå Erreur test API:', error.message);
    }
    
    // 7. R√©sum√© final
    console.log('\nüìä R√âSUM√â FINAL:');
    console.log(`   ‚Ä¢ Gifts avant retrait: ${currentInventory.length}`);
    console.log(`   ‚Ä¢ Gifts apr√®s retrait: ${updatedInventory.length}`);
    console.log(`   ‚Ä¢ Gift retir√©: ${giftToWithdraw.collectible_id}`);
    console.log(`   ‚Ä¢ Synchronisation: ‚úÖ R√©ussie`);
    
    console.log('\nüéâ TEST DE SYNCHRONISATION V2 TERMIN√â !');
    console.log('========================================');
    
    // 8. Instructions pour tester en production
    console.log('\nüöÄ POUR TESTER EN PRODUCTION:');
    console.log('   1. Lancer le d√©tecteur: "relance le detecteur"');
    console.log('   2. Envoyer un gift depuis @WxyzCrypto vers un utilisateur');
    console.log('   3. V√©rifier que le gift est retir√© de la DB');
    console.log('   4. V√©rifier que l\'inventaire est mis √† jour en temps r√©el');
    
  } catch (error) {
    console.error('üí• Erreur lors du test:', error);
  }
}

// Lancer le test
testWithdrawSyncV2();
