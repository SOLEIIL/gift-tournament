// force-delete-sql.js
// Script qui utilise SQL brut pour forcer la suppression des gifts

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://gquyvmelpkgnddvefpwd.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdxdXl2bWVscGtnbmRkdmVmcHdkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyMTU1MDAsImV4cCI6MjA3MTc5MTUwMH0.rzMv2n_RyFDlMCxzqLt6B-UHS-OlcoJDXEOWs1-tTN0';

// Cr√©er le client Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function forceDeleteWithSQL() {
  try {
    console.log('üí• SUPPRESSION FORC√âE AVEC SQL BRUT');
    console.log('=====================================');
    
    // 1. V√©rifier l'√©tat initial
    console.log('\nüîç √âTAT INITIAL:');
    
    const { data: initialInventory, error: inventoryError } = await supabase
      .from('inventory')
      .select('*');
    
    if (inventoryError) {
      console.error('‚ùå Erreur inventory:', inventoryError);
      return;
    }
    
    console.log(`üì¶ ${initialInventory.length} entr√©e(s) d'inventaire trouv√©e(s)`);
    
    const { data: initialGifts, error: giftsError } = await supabase
      .from('gifts')
      .select('*');
    
    if (giftsError) {
      console.error('‚ùå Erreur gifts:', giftsError);
      return;
    }
    
    console.log(`üéÅ ${initialGifts.length} gift(s) trouv√©(s)`);
    
    // 2. SUPPRESSION FORC√âE AVEC SQL BRUT
    console.log('\nüí• SUPPRESSION FORC√âE AVEC SQL BRUT:');
    
    // D√©sactiver temporairement les contraintes de cl√©s √©trang√®res
    console.log('   üîì D√©sactivation des contraintes de cl√©s √©trang√®res...');
    
    try {
      // D√©sactiver les contraintes pour la table inventory
      await supabase.rpc('exec_sql', {
        sql: 'ALTER TABLE inventory DISABLE TRIGGER ALL;'
      });
      console.log('   ‚úÖ Contraintes inventory d√©sactiv√©es');
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Impossible de d√©sactiver les contraintes inventory (normal)');
    }
    
    try {
      // D√©sactiver les contraintes pour la table gifts
      await supabase.rpc('exec_sql', {
        sql: 'ALTER TABLE gifts DISABLE TRIGGER ALL;'
      });
      console.log('   ‚úÖ Contraintes gifts d√©sactiv√©es');
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Impossible de d√©sactiver les contraintes gifts (normal)');
    }
    
    // 3. SUPPRESSION FORC√âE DE L'INVENTAIRE
    console.log('\nüóëÔ∏è  SUPPRESSION FORC√âE DE L\'INVENTAIRE:');
    
    if (initialInventory.length > 0) {
      // Utiliser SQL brut pour supprimer tout l'inventaire
      const { error: deleteInventoryError } = await supabase
        .rpc('exec_sql', {
          sql: 'DELETE FROM inventory;'
        });
      
      if (deleteInventoryError) {
        console.log('   ‚ö†Ô∏è  SQL brut inventory √©chou√©, tentative avec m√©thode normale...');
        
        // Fallback : suppression normale
        for (const item of initialInventory) {
          const { error: deleteError } = await supabase
            .from('inventory')
            .delete()
            .eq('id', item.id);
          
          if (deleteError) {
            console.error(`   ‚ùå Erreur suppression inventory ${item.id}:`, deleteError);
          } else {
            console.log(`   ‚úÖ Entr√©e d'inventaire ID ${item.id} supprim√©e !`);
          }
        }
      } else {
        console.log('   ‚úÖ TOUT L\'INVENTAIRE SUPPRIM√â AVEC SQL BRUT !');
      }
    }
    
    // 4. SUPPRESSION FORC√âE DES GIFTS
    console.log('\nüóëÔ∏è  SUPPRESSION FORC√âE DES GIFTS:');
    
    if (initialGifts.length > 0) {
      // Utiliser SQL brut pour supprimer tous les gifts
      const { error: deleteGiftsError } = await supabase
        .rpc('exec_sql', {
          sql: 'DELETE FROM gifts;'
        });
      
      if (deleteGiftsError) {
        console.log('   ‚ö†Ô∏è  SQL brut gifts √©chou√©, tentative avec m√©thode normale...');
        
        // Fallback : suppression normale
        for (const gift of initialGifts) {
          const { error: deleteError } = await supabase
            .from('gifts')
            .delete()
            .eq('id', gift.id);
          
          if (deleteError) {
            console.error(`   ‚ùå Erreur suppression gift ${gift.id}:`, deleteError);
          } else {
            console.log(`   ‚úÖ Gift ID ${gift.id} supprim√© !`);
          }
        }
      } else {
        console.log('   ‚úÖ TOUS LES GIFTS SUPPRIM√âS AVEC SQL BRUT !');
      }
    }
    
    // 5. R√©activer les contraintes
    console.log('\nüîí R√âACTIVATION DES CONTRAINTES:');
    
    try {
      await supabase.rpc('exec_sql', {
        sql: 'ALTER TABLE inventory ENABLE TRIGGER ALL;'
      });
      console.log('   ‚úÖ Contraintes inventory r√©activ√©es');
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Impossible de r√©activer les contraintes inventory');
    }
    
    try {
      await supabase.rpc('exec_sql', {
        sql: 'ALTER TABLE gifts ENABLE TRIGGER ALL;'
      });
      console.log('   ‚úÖ Contraintes gifts r√©activ√©es');
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Impossible de r√©activer les contraintes gifts');
    }
    
    // 6. V√©rifier le r√©sultat final
    console.log('\nüîç V√âRIFICATION FINALE:');
    
    const { data: finalInventory, error: finalInventoryError } = await supabase
      .from('inventory')
      .select('*');
    
    if (finalInventoryError) {
      console.error('‚ùå Erreur v√©rification inventory:', finalInventoryError);
    } else {
      console.log(`üì¶ ${finalInventory.length} entr√©e(s) d'inventaire restante(s)`);
    }
    
    const { data: finalGifts, error: finalGiftsError } = await supabase
      .from('gifts')
      .select('*');
    
    if (finalGiftsError) {
      console.error('‚ùå Erreur v√©rification gifts:', finalGiftsError);
    } else {
      console.log(`üéÅ ${finalGifts.length} gift(s) restant(s)`);
    }
    
    console.log('\n=====================================');
    console.log('üí• SUPPRESSION FORC√âE TERMIN√âE !');
    
    if ((finalInventory?.length || 0) === 0 && (finalGifts?.length || 0) === 0) {
      console.log('‚úÖ Base de donn√©es compl√®tement vide !');
      console.log('üéØ Pr√™t pour la synchronisation automatique avec le d√©tecteur');
      console.log('\nüöÄ RELANCEZ MAINTENANT LE D√âTECTEUR !');
    } else {
      console.log('‚ö†Ô∏è  Certains √©l√©ments n\'ont pas pu √™tre supprim√©s');
      console.log('üîç V√©rifiez les contraintes de la base de donn√©es');
    }
    
  } catch (error) {
    console.error('üí• Erreur lors de la suppression forc√©e:', error);
  }
}

// Ex√©cuter la suppression forc√©e
forceDeleteWithSQL();
