const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
require('dotenv').config();

// Script de test pour simuler la d√©tection de gifts en temps r√©el
async function testGiftDetection() {
  console.log('üß™ TEST DE D√âTECTION DE GIFTS EN TEMPS R√âEL');
  console.log('==========================================');
  
  try {
    // Cr√©er le client Telegram
    const client = new TelegramClient(
      new StringSession(process.env.TELEGRAM_SESSION_STRING),
      parseInt(process.env.TELEGRAM_API_ID),
      process.env.TELEGRAM_API_HASH,
      { connectionRetries: 5 }
    );
    
    await client.start();
    console.log('‚úÖ Connect√© √† Telegram');
    
    // Simuler un gift re√ßu
    console.log('\nüéÅ SIMULATION D\'UN GIFT RE√áU EN TEMPS R√âEL...');
    
    // Cr√©er un objet message simul√© avec MessageActionStarGiftUnique
    const simulatedGiftMessage = {
      id: 999999,
      action: {
        className: 'MessageActionStarGiftUnique',
        transferStars: 25,
        gift: {
          title: 'Test Gift - Lol Pop',
          slug: 'TestLolPop-99999',
          num: 99999,
          attributes: [
            {
              className: 'StarGiftAttributeModel',
              name: 'Test Gold Star',
              rarityPermille: 15
            },
            {
              className: 'StarGiftAttributePattern',
              name: 'Test Genie Lamp',
              rarityPermille: 8
            },
            {
              className: 'StarGiftAttributeBackdrop',
              name: 'Test Copper',
              rarityPermille: 25
            }
          ]
        }
      },
      fromId: {
        className: 'PeerUser',
        userId: 123456789
      },
      sender: {
        username: 'testuser'
      },
      message: 'Test gift message',
      date: Math.floor(Date.now() / 1000)
    };
    
    console.log('üìã Message simul√© cr√©√© avec succ√®s');
    console.log('üéÅ Type d\'action:', simulatedGiftMessage.action.className);
    console.log('üí∞ Co√ªt en stars:', simulatedGiftMessage.action.transferStars);
    console.log('üè∑Ô∏è Titre du gift:', simulatedGiftMessage.action.gift.title);
    console.log('üÜî Slug:', simulatedGiftMessage.action.gift.slug);
    console.log('‚≠ê Attributs:', simulatedGiftMessage.action.gift.attributes.length);
    
    // Tester la fonction isRealTelegramGift
    console.log('\nüîç TEST DE LA FONCTION isRealTelegramGift...');
    
    // Importer la classe TelegramGiftDetector
    const TelegramGiftDetector = require('./services/telegramGiftDetector.cjs');
    
    // Cr√©er une instance de test
    const testDetector = new TelegramGiftDetector({
      telegramApiId: process.env.TELEGRAM_API_ID,
      telegramApiHash: process.env.TELEGRAM_API_HASH,
      telegramSessionString: process.env.TELEGRAM_SESSION_STRING,
      depositAccountUsername: 'WxyzCrypto',
      webhookUrl: process.env.WEBHOOK_URL || 'https://test.com',
      webhookSecret: process.env.WEBHOOK_SECRET || 'test',
      apiKey: process.env.DEPOSIT_API_KEY || 'test'
    });
    
    // Tester la d√©tection
    const isGift = testDetector.isRealTelegramGift(simulatedGiftMessage);
    console.log('‚úÖ R√©sultat de isRealTelegramGift:', isGift);
    
    if (isGift) {
      console.log('üéâ SUCC√àS ! Le gift simul√© est d√©tect√© comme un vrai gift Telegram');
      
      // Tester l'extraction des m√©tadonn√©es
      console.log('\nüîç TEST DE L\'EXTRACTION DES M√âTADONN√âES...');
      const giftInfo = testDetector.extractGiftInfo(simulatedGiftMessage);
      
      if (giftInfo) {
        console.log('‚úÖ M√©tadonn√©es extraites avec succ√®s:');
        console.log('   üè∑Ô∏è Nom:', giftInfo.giftName);
        console.log('   üÜî Collectible ID:', giftInfo.collectibleId);
        console.log('   üí∞ Valeur:', giftInfo.giftValue);
        console.log('   üé≠ Type:', giftInfo.giftType);
        console.log('   üì± Media Type:', giftInfo.mediaType);
        console.log('   üë§ User ID:', giftInfo.fromUserId);
        console.log('   üè∑Ô∏è Username:', giftInfo.fromUsername);
        console.log('   ‚≠ê Mod√®le:', giftInfo.collectibleModel);
        console.log('   üé® Backdrop:', giftInfo.collectibleBackdrop);
        console.log('   üîÆ Symbole:', giftInfo.collectibleSymbol);
        
        console.log('\nüéØ TEST COMPLET R√âUSSI !');
        console.log('Votre syst√®me d√©tecte parfaitement les gifts Telegram !');
      } else {
        console.log('‚ùå √âchec de l\'extraction des m√©tadonn√©es');
      }
    } else {
      console.log('‚ùå √âCHEC ! Le gift simul√© n\'est pas d√©tect√©');
    }
    
    await client.disconnect();
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Lancer le test
console.log('üöÄ D√©marrage du test de d√©tection...');
testGiftDetection();

